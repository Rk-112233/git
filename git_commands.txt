1. Git Basics
Git is a distributed version control system that tracks changes in source code, allowing collaboration and history tracking.

| Command                                              | Description                                        | Example                                                |
| ---------------------------------------------------- | -------------------------------------------------- | ------------------------------------------------------ |
| `git --version`                                      | Check installed Git version.                       | `git --version`                                        |
| `git config --global user.name "Name"`               | Set username globally.                             | `git config --global user.name "Ranjith"`              |
| `git config --global user.email "email@example.com"` | Set email globally.                                | `git config --global user.email "ranjith@example.com"` |
| `git init`                                           | Initialize a new repository in the current folder. | `git init`                                             |
| `git clone <url>`                                    | Clone an existing repository from a remote URL.    | `git clone https://github.com/user/repo.git`           |
| `git status`                                         | Show changes in the working directory.             | `git status`                                           |
| `git help <command>`                                 | Get help for a specific command.                   | `git help commit`                                      |


2. Staging & Committing

Git has three areas: Working Directory → Staging Area → Repository.

git add moves changes to staging.

git commit records changes in the repository.

| Command                | Description                           | Example                          |
| ---------------------- | ------------------------------------- | -------------------------------- |
| `git add <file>`       | Stage a specific file.                | `git add main.go`                |
| `git add .`            | Stage all files.                      | `git add .`                      |
| `git commit -m "msg"`  | Commit staged changes with a message. | `git commit -m "Initial commit"` |
| `git commit -am "msg"` | Stage and commit all tracked files.   | `git commit -am "Fix bug"`       |

3. Branching
Branches allow you to work on features independently from main without affecting it.

| Command                  | Description                  | Example                         |
| ------------------------ | ---------------------------- | ------------------------------- |
| `git branch`             | List all branches.           | `git branch`                    |
| `git branch <name>`      | Create new branch.           | `git branch feature-1`          |
| `git checkout <name>`    | Switch branch (old).         | `git checkout feature-1`        |
| `git switch <name>`      | Switch branch (new).         | `git switch feature-1`          |
| `git checkout -b <name>` | Create and switch to branch. | `git checkout -b login-feature` |
| `git merge <branch>`     | Merge branch into current.   | `git merge feature-1`           |
| `git branch -d <name>`   | Delete branch.               | `git branch -d feature-1`       |

4. Remote Repositories
Remote repos (like GitHub, GitLab) store code online for collaboration.
| Command                       | Description                        | Example                                                  |
| ----------------------------- | ---------------------------------- | -------------------------------------------------------- |
| `git remote -v`               | List remotes.                      | `git remote -v`                                          |
| `git remote add origin <url>` | Add a remote.                      | `git remote add origin https://github.com/user/repo.git` |
| `git push origin <branch>`    | Push branch to remote.             | `git push origin main`                                   |
| `git pull origin <branch>`    | Pull and merge latest changes.     | `git pull origin main`                                   |
| `git fetch`                   | Download new data without merging. | `git fetch`                                              |

5. Undoing Changes
Git allows you to revert changes depending on their state.
| Command                   | Description                                       | Example                   |
| ------------------------- | ------------------------------------------------- | ------------------------- |
| `git restore <file>`      | Discard uncommitted changes in working directory. | `git restore index.html`  |
| `git reset <file>`        | Unstage a file.                                   | `git reset main.go`       |
| `git reset --soft HEAD~1` | Undo last commit, keep changes staged.            | `git reset --soft HEAD~1` |
| `git reset --hard HEAD~1` | Undo last commit, discard changes.                | `git reset --hard HEAD~1` |


6. Tags
Tags are used to mark specific points in history (e.g., releases).
| Command                         | Description             | Example                              |
| ------------------------------- | ----------------------- | ------------------------------------ |
| `git tag`                       | List all tags.          | `git tag`                            |
| `git tag <tagname>`             | Create lightweight tag. | `git tag v1.0`                       |
| `git tag -a <tagname> -m "msg"` | Create annotated tag.   | `git tag -a v1.0 -m "First release"` |
| `git push origin <tagname>`     | Push single tag.        | `git push origin v1.0`               |
| `git push origin --tags`        | Push all tags.          | `git push origin --tags`             |

7. Merge vs Rebase
Both integrate changes, but differently.
| Feature      | Merge                              | Rebase                                 |
| ------------ | ---------------------------------- | -------------------------------------- |
| **History**  | Keeps all commits & merge commit.  | Creates linear history.                |
| **Command**  | `git merge branch-name`            | `git rebase branch-name`               |
| **Use Case** | When you want to preserve history. | When you want a clean, linear history. |

8. Common Workflows
Feature Branch Workflow → Create branch → work → PR → merge to main.

Gitflow Workflow → Uses develop, release, hotfix branches.

Fork & Pull → Fork repo → clone → make changes → push → PR.
